name: Deploy to Mainnet

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for mainnet deployment'
        required: true
        type: string
      confirm:
        description: 'Type "DEPLOY TO MAINNET" to confirm (exact match required)'
        required: true
        type: string

env:
  NODE_VERSION: '20.19.5'

jobs:
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate confirmation text
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "DEPLOY TO MAINNET" ]; then
            echo "❌ Confirmation text does not match. Expected: 'DEPLOY TO MAINNET'"
            echo "You entered: '${{ github.event.inputs.confirm }}'"
            exit 1
          fi
          echo "✅ Confirmation validated"

      - name: Check Sepolia deployment exists
        run: |
          if [ ! -f "deployments.json" ]; then
            echo "❌ deployments.json not found"
            exit 1
          fi

          SEPOLIA_PROXY=$(node -e "const d = require('./deployments.json'); console.log(d.sepolia?.proxy || '')")

          if [ -z "$SEPOLIA_PROXY" ] || [ "$SEPOLIA_PROXY" = "undefined" ]; then
            echo "❌ No Sepolia deployment found. Deploy to Sepolia first!"
            exit 1
          fi

          echo "✅ Sepolia deployment verified: $SEPOLIA_PROXY"

      - name: Check if Sepolia was tested
        run: |
          TESTED=$(node -e "const d = require('./deployments.json'); console.log(d.sepolia?.tested || false)")

          if [ "$TESTED" != "true" ]; then
            echo "⚠️  Warning: Sepolia deployment not marked as tested"
            echo "It's recommended to test on Sepolia before mainnet deployment"
          else
            echo "✅ Sepolia deployment was tested"
          fi

      - name: Create validation summary
        run: |
          echo "## ✅ Pre-deployment Validation Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Confirmation text validated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Sepolia deployment exists" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Ready for Mainnet Deployment" >> $GITHUB_STEP_SUMMARY
          echo "⚠️  **This will deploy to Ethereum Mainnet**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Waiting for manual approval..." >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    needs: validate
    environment: production  # Requires manual approval in GitHub settings

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run build

      - name: Deploy to Mainnet
        env:
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          MAINNET_OWNER_ADDRESS: ${{ secrets.MAINNET_OWNER_ADDRESS }}
          MAINNET_FEE_RECIPIENT: ${{ secrets.MAINNET_FEE_RECIPIENT }}
        run: npm run deploy:mainnet

      - name: Verify on Etherscan
        env:
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: npm run verify:mainnet
        continue-on-error: true

      - name: Read deployment info
        id: deployment
        run: |
          PROXY=$(node -e "const d = require('./deployments.json'); console.log(d.mainnet?.proxy || 'unknown')")
          IMPL=$(node -e "const d = require('./deployments.json'); console.log(d.mainnet?.implementation || 'unknown')")
          DEPLOYED_AT=$(node -e "const d = require('./deployments.json'); console.log(d.mainnet?.deployedAt || new Date().toISOString())")
          TX_HASH=$(node -e "const d = require('./deployments.json'); console.log(d.mainnet?.txHash || 'unknown')")
          echo "proxy=$PROXY" >> $GITHUB_OUTPUT
          echo "implementation=$IMPL" >> $GITHUB_OUTPUT
          echo "deployed_at=$DEPLOYED_AT" >> $GITHUB_OUTPUT
          echo "tx_hash=$TX_HASH" >> $GITHUB_OUTPUT

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mainnet-deployment
          path: |
            deployments.json
            .openzeppelin/mainnet.json
          retention-days: 90

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: mainnet-v${{ github.run_number }}
          release_name: Mainnet Deployment v${{ github.run_number }}
          body: |
            ## 🚀 Mainnet Deployment

            **Reason:** ${{ github.event.inputs.reason }}

            ### Contract Addresses
            - **Proxy:** [`${{ steps.deployment.outputs.proxy }}`](https://etherscan.io/address/${{ steps.deployment.outputs.proxy }})
            - **Implementation:** [`${{ steps.deployment.outputs.implementation }}`](https://etherscan.io/address/${{ steps.deployment.outputs.implementation }})

            ### Deployment Details
            - **Network:** Ethereum Mainnet (Chain ID: 1)
            - **Deployed by:** @${{ github.actor }}
            - **Deployed at:** ${{ steps.deployment.outputs.deployed_at }}
            - **Transaction:** [`${{ steps.deployment.outputs.tx_hash }}`](https://etherscan.io/tx/${{ steps.deployment.outputs.tx_hash }})

            ### Verification
            - ✅ Verified on Etherscan
            - ✅ UUPS Upgradeable Proxy Pattern
            - ✅ OpenZeppelin Standards

            ### Security Notes
            ⚠️ **Important:**
            - Review all contract interactions carefully
            - Verify ownership transfer to DAO
            - Configure Safe multisig for treasury
            - Test thoroughly before significant use

            ### Next Steps
            1. Transfer ownership to Aragon DAO
            2. Configure Safe multisig as fee recipient
            3. Add Uniswap V2/V3 pool addresses
            4. Announce deployment to community
          draft: false
          prerelease: false

      - name: Create PR for README update
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update mainnet deployment info"
          title: "🚀 Update README with Mainnet Deployment"
          body: |
            ## Mainnet Deployment Complete

            This PR updates the README with mainnet deployment information.

            **Proxy:** `${{ steps.deployment.outputs.proxy }}`
            **Implementation:** `${{ steps.deployment.outputs.implementation }}`

            **Deployed by:** @${{ github.actor }}
            **Reason:** ${{ github.event.inputs.reason }}

            Please review and merge to publish mainnet deployment info.
          branch: mainnet-deployment-${{ github.run_number }}
          delete-branch: true

      - name: Create deployment summary
        run: |
          echo "## 🎉 Mainnet Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Contract Addresses" >> $GITHUB_STEP_SUMMARY
          echo "- **Proxy:** [\`${{ steps.deployment.outputs.proxy }}\`](https://etherscan.io/address/${{ steps.deployment.outputs.proxy }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Implementation:** [\`${{ steps.deployment.outputs.implementation }}\`](https://etherscan.io/address/${{ steps.deployment.outputs.implementation }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### What's Next?" >> $GITHUB_STEP_SUMMARY
          echo "✅ GitHub Release created" >> $GITHUB_STEP_SUMMARY
          echo "📝 Pull request created for README update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Important Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review and merge the README PR" >> $GITHUB_STEP_SUMMARY
          echo "2. Transfer ownership to Aragon DAO" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure Safe multisig as fee recipient" >> $GITHUB_STEP_SUMMARY
          echo "4. Add AMM pool addresses" >> $GITHUB_STEP_SUMMARY
          echo "5. Announce to community" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Congratulations on your mainnet deployment!** 🚀" >> $GITHUB_STEP_SUMMARY
